// eslint-disable-next-line import/no-extraneous-dependencies
import { css, keyframes } from 'styled-components';

import { defaultSkeletonColor, defaultSkeletonShineColor } from './constants';
import { getRgbColor } from './colors';

const opacityPulse = keyframes`
  0% { 
    opacity: 1; 
  }
  30% { 
    opacity: 0.4; 
  }
  100% { 
    opacity: 1; 
  }
`;
const wave = keyframes`
  0% { 
    transform: translateX(-100%) 
  }
  100% { 
    transform: translateX(100%) 
  }
`;

export const animationMixin = ({ theme, ...props }) => {
  if (props.disableAnimation || theme.skeletonDisableAnimation) return null;

  const animation = props.animation || theme.animation || 'wave';
  const speed = props.speed || theme.speed || 1.25;
  const animationType = 'cubic-bezier(0.45, 0, 0.26, 1.15)';

  if (animation === 'pulse') {
    return css`
      animation: ${opacityPulse} ${speed}s ${animationType} infinite;
    `;
  }
  if (animation === 'wave') {
    return css`
      &:after {
        animation: ${animation === 'wave' ? wave : opacityPulse} ${speed}s
          ${animationType} infinite;
      }
    `;
  }
  return css`
    animation: ${animation === 'wave' ? wave : opacityPulse} ${speed}s
      ${animationType} infinite;
  `;
};

export const avatarSizingMixin = ({ theme, ...props }) => {
  const avatarRadius =
    props.avatarRadius || props.radius || theme.avatarRadius || '50%';
  const avatarSize =
    props.size || props.avatarSize || theme.avatarSize || '32px';

  return css`
    border-radius: ${typeof avatarRadius === 'number'
      ? `${avatarRadius}%`
      : avatarRadius};
    height: ${typeof avatarSize === 'number' ? `${avatarSize}px` : avatarSize};
    width: ${typeof avatarSize === 'number' ? `${avatarSize}px` : avatarSize};
  `;
};

export const commonSizingMixin = ({ height, width }) => {
  return css`
    height: ${height && typeof height === 'number' ? `${height}px` : height};
    width: ${width && typeof width === 'number' ? `${width}px` : width};
  `;
};

export const spaceMixin = ({ theme, ...props }) => {
  const space = props.space || theme.skeletonSpace || 1;

  return css`
    margin: ${space && typeof space === 'number' ? `${space * 0.75}em` : space}
      0;
    &:first-child {
      margin-top: 0;
    }
    &:last-child {
      margin-bottom: 0;
    }
    &:only-child {
      margin: 0;
    }
  `;
};

export const textStyleMixin = ({ theme, ...props }) => {
  const lineHeight = props.lineHeight || theme.skeletonLineHeight || 1;

  return css`
    line-height: ${lineHeight};
  `;
};
export const cornerRadiusMixin = ({ theme, ...props }) => {
  const cornerRadius = props.radius || theme.skeletonRadius || 2;
  return css`
    border-radius: ${typeof cornerRadius === 'number'
      ? `${cornerRadius}px`
      : cornerRadius};
    overflow: hidden;
    transform: translateZ(0);
  `;
};

export const commonStyleMixin = ({ theme, ...props }) => {
  const skeletonColor =
    props.skeletonColor || theme.skeletonColor || defaultSkeletonColor;
  const skeletonShineColor =
    props.skeletonShineColor ||
    theme.skeletonShineColor ||
    defaultSkeletonShineColor;

  if (!skeletonColor)
    throw new Error(
      `Missing skeletonColor variable.\nProvide it either via the theme object or as a prop.`
    );
  if (!skeletonShineColor)
    throw new Error(
      `Missing skeletonShineColor variable.\nProvide it either via the theme object or as a prop.`
    );

  const skeletonRgbString = getRgbColor(skeletonColor);
  const skeletonShineRgbString = getRgbColor(skeletonShineColor);

  return css`
    background: rgba(${skeletonRgbString}, 1);
    overflow: hidden;
    position: relative;
    transform: translateZ(0);

    &:after {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      transform: translateX(-100%);
      background-image: linear-gradient(
        90deg,
        rgba(${skeletonShineRgbString}, 0) 0,
        rgba(${skeletonShineRgbString}, 0.2) 20%,
        rgba(${skeletonShineRgbString}, 0.35) 40%,
        rgba(${skeletonShineRgbString}, 0.5) 60%,
        rgba(${skeletonShineRgbString}, 0)
      );
      content: '';
    }
  `;
};
