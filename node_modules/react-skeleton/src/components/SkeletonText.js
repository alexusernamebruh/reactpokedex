// eslint-disable-next-line import/no-extraneous-dependencies
import PropTypes from 'prop-types';
import React, { Fragment } from 'react';
import styled from 'styled-components';

import {
  animationMixin,
  commonStyleMixin,
  commonSizingMixin,
  cornerRadiusMixin,
  spaceMixin,
  textStyleMixin,
} from '../../utils/mixins';

const StyledSkeletonLine = styled.div`
  ${commonStyleMixin};
  ${commonSizingMixin};
  ${animationMixin};
  ${textStyleMixin};
  ${cornerRadiusMixin};
  ${spaceMixin};
`;

const SkeletonLine = props => {
  return <StyledSkeletonLine {...props}>&nbsp;&zwnj;</StyledSkeletonLine>;
};

const StyledSkeletonMultiLineContainer = styled.div`
  width: ${({ width }) => width || '100%'};
`;

const SkeletonText = ({ variant, ...props }) => {
  const { width, count, ...rest } = props;

  if (!count || count <= 1) return <SkeletonLine {...rest} width={width} />;

  const skeletons = new Array(count).fill(<SkeletonLine {...rest} />);

  return (
    <StyledSkeletonMultiLineContainer width={width}>
      {skeletons.map((s, i) => (
        <Fragment key={i}>{s}</Fragment>
      ))}
    </StyledSkeletonMultiLineContainer>
  );
};

export default SkeletonText;

SkeletonText.propTypes = {
  /**
   * Is this the principal call to action on the page?
   */
  animation: PropTypes.string,
  /**
   * Number of skeleton lines (only for text variant)
   */
  count: PropTypes.number,
  /**
   * Disabled Skeleton animation, good for placeholders.
   */
  disableAnimation: PropTypes.bool,
  /**
   * Height of of rect or text block (not applicable to Avatar)
   */
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * Height of of rect or text block (not applicable to Avatar)
   */
  lineHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * Size of Avatar (not applicable to rect or text block)
   */
  radius: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * Skeleton base color to use
   */
  skeletonColor: PropTypes.string,
  /**
   * Skeleton shine color
   */
  skeletonShineColor: PropTypes.string,
  /**
   * Space between lines.
   */
  space: PropTypes.number,
  /**
   * Speed of the animation.
   */
  speed: PropTypes.number,
  /**
   * Width of of rect or text block (not applicable to Avatar)
   */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
};

SkeletonText.defaultProps = {};
